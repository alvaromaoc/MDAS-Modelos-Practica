plugins {
    id 'java'
    id 'io.quarkus'
    id 'org.sonarqube' version "6.0.1.5171"
    id 'jacoco'
}

jacoco {
    toolVersion = "0.8.12"
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")
    implementation 'io.quarkus:quarkus-rest'
    implementation 'io.quarkus:quarkus-kubernetes'
    implementation 'io.quarkus:quarkus-openshift'
    implementation 'io.quarkus:quarkus-container-image-jib'
    implementation 'io.quarkus:quarkus-arc'
    testImplementation 'io.quarkus:quarkus-junit5'
    testImplementation 'io.rest-assured:rest-assured'
}

group 'edu.url.salle.mdas'

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

test {
    systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

sonar {
    properties {
        property "sonar.projectKey", "alvaromaoc_MDAS-Modelos-Practica"
        property "sonar.organization", "alvaromaoc"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.qualitygate.wait", true
    }
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
}

sourceSets {
    'e2e' {
        java {
            compileClasspath += test.compileClasspath
            runtimeClasspath += test.runtimeClasspath
            srcDir 'src/e2e/java'
        }
    }
}

tasks.register("e2e", Test) {
    testClassesDirs = sourceSets.e2e.output.classesDirs
    classpath = sourceSets.e2e.runtimeClasspath

    useJUnitPlatform()
    mustRunAfter tasks.named("build")
}

tasks.named("test") {
    finalizedBy tasks.named("jacocoTestReport")
}

tasks.named("jacocoTestReport") {
    dependsOn tasks.named("test")
}

tasks.named("sonar") {
    dependsOn tasks.named("jacocoTestReport")
}

tasks.named("quarkusBuild") {
    mustRunAfter tasks.named("sonar")
}


